#
# Copyright (C) ${project.inceptionYear} DANS - Data Archiving and Networked Services (info@dans.knaw.nl)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# source: https://github.com/objectrocket/ansible-kafka

- name: Add group "kafka"
  group:
    name: "{{ kafka_group }}"
    system: yes

- name: Add user "kafka"
  user:
    name: "{{ kafka_user }}"
    group: "{{ kafka_group }}"
    shell: /sbin/nologin
    system: yes

- name: Download the tarball
  get_url:
    url: "http://apache.cs.uu.nl/kafka/{{ kafka_version }}/kafka_2.12-{{ kafka_version }}.tgz"
    dest: "/opt/kafka_2.12-{{ kafka_version }}.tgz"

- name: Extract the tarball
  unarchive:
    src: "/opt/kafka_2.12-{{ kafka_version }}.tgz"
    dest: /opt/
    copy: no
    creates: "/opt/kafka_2.12-{{ kafka_version }}"

- name: Symlink install directory
  file:
    src: "/opt/kafka_2.12-{{ kafka_version }}"
    path: /opt/kafka
    state: link

- name: Set permissions to Kafka folder
  file:
    path: /opt/kafka/
    owner: root
    group: root
    recurse: yes

- name: Create /kafka/data directory
  file:
    path: /kafka/data
    state: directory
    owner: "{{ kafka_user }}"
    group: "{{ kafka_group }}"
  when: data_disks_devices is not defined or not data_disks_devices or data_disks_devices|length <= 0

- name: Create /disk/{0..n}/kafka/data directories
  file:
    path: "/disk/{{ item.0 + 1 }}/kafka/data"
    state: directory
    owner: "{{ kafka_user }}"
    group: "{{ kafka_group }}"
  with_indexed_items: "{{ data_disks_devices }}"
  when: data_disks_devices is defined and data_disks_devices

- name: Create Kafka log directory
  file:
    path: "{{ kafka_log_dir }}"
    state: directory
    owner: "{{ kafka_user }}"
    group: "{{ kafka_group }}"

- name: Link the log directory
  file:
    src: "{{ kafka_log_dir }}"
    path: "/opt/kafka/logs"
    state: link

- name: Create Kafka conf directory
  file:
    path: "{{ kafka_conf_dir }}"
    state: directory
    owner: root
    group: root
    mode: 755

- name: Install Kafka init script
  template:
    src: kafka-server.j2
    dest: /etc/init.d/kafka-server
    mode: 0755
  notify: Reload systemd

- meta: flush_handlers

- name: Configure Kafka server
  template:
    src: server.properties.j2
    dest: "{{ kafka_conf_dir }}/server.properties"
  notify: Restart kafka

- name: Upload log4j configs
  copy:
    src: "{{ item }}"
    dest: "{{ kafka_conf_dir }}/"
    owner: root
    group: root
    mode: 0644
  with_items:
    - log4j.properties
    - tools-log4j.properties
  notify: Restart kafka

- meta: flush_handlers

- name: Make sure Kafka is running
  service:
    name: kafka-server
    enabled: yes
    state: started

- name: Add Kafka binaries to PATH
  copy:
    src: kafka.sh
    dest: /etc/profile.d/
    owner: root
    group: root
    mode: 0644

- name: Add a topic for testing purposes
  command: /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test
  register: kafka_topic_output

- name: Print topic creation output
  debug:
    msg: "{{ kafka_topic_output.stdout }}"

- name: Lookup all available topics
  command: /opt/kafka/bin/kafka-topics.sh --list --zookeeper localhost:2181
  register: available_kafka_topics

- name: Print available topics
  debug:
    msg: "{{ available_kafka_topics.stdout }}"
